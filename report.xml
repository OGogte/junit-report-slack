<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="1" time="3.612" timestamp="2025-02-14T18:49:43.841407+00:00" hostname="Parths-MacBook-Air.local"><testcase classname="testsuite.workflows.test_onboarding.TestOnboarding" name="test_google_onboarding[chromium]" time="3.473"><error message="failed on setup with &quot;django.db.migrations.exceptions.MigrationSchemaMissing: Unable to create the django_migrations table (no schema has been selected to create in&#10;LINE 1: CREATE TABLE &quot;django_migrations&quot; (&quot;id&quot; bigint NOT NULL PRIMA...&#10;                     ^)&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x16c2d56d0&gt;
sql = 'CREATE TABLE "django_migrations" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied" timestamp with time zone NOT NULL)'
params = None
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='oauth_tokens_database'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x16c2d56d0&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        # Raise a warning during app initialization (stored_app_configs is only
        # ever set during testing).
        if not apps.ready and not apps.stored_app_configs:
            warnings.warn(self.APPS_NOT_READY_WARNING_MSG, category=RuntimeWarning)
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
&gt;               return self.cursor.execute(sql)

venv/lib/python3.11/site-packages/django/db/backends/utils.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;django.db.backends.postgresql.base.Cursor [closed] [IDLE] (host=localhost user=admin database=test_iden_oauth) at 0x169d8f4d0&gt;
query = 'CREATE TABLE "django_migrations" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied" timestamp with time zone NOT NULL)'
params = None

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        prepare: bool | None = None,
        binary: bool | None = None,
    ) -&gt; Self:
        """
        Execute a query or command to the database.
        """
        try:
            with self._conn.lock:
                self._conn.wait(
                    self._execute_gen(query, params, prepare=prepare, binary=binary)
                )
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.InvalidSchemaName: no schema has been selected to create in
E           LINE 1: CREATE TABLE "django_migrations" ("id" bigint NOT NULL PRIMA...
E                                ^

venv/lib/python3.11/site-packages/psycopg/cursor.py:97: InvalidSchemaName

The above exception was the direct cause of the following exception:

self = &lt;django.db.migrations.recorder.MigrationRecorder object at 0x169898590&gt;

    def ensure_schema(self):
        """Ensure the table exists and has the correct schema."""
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
&gt;               editor.create_model(self.Migration)

venv/lib/python3.11/site-packages/django/db/migrations/recorder.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv/lib/python3.11/site-packages/django/db/backends/base/schema.py:505: in create_model
    self.execute(sql, params or None)
venv/lib/python3.11/site-packages/django/db/backends/postgresql/schema.py:45: in execute
    return super().execute(sql, params)
venv/lib/python3.11/site-packages/django/db/backends/base/schema.py:202: in execute
    cursor.execute(sql, params)
venv/lib/python3.11/site-packages/django/db/backends/utils.py:79: in execute
    return self._execute_with_wrappers(
venv/lib/python3.11/site-packages/django/db/backends/utils.py:92: in _execute_with_wrappers
    return executor(sql, params, many, context)
venv/lib/python3.11/site-packages/django/db/backends/utils.py:100: in _execute
    with self.db.wrap_database_errors:
venv/lib/python3.11/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
venv/lib/python3.11/site-packages/django/db/backends/utils.py:103: in _execute
    return self.cursor.execute(sql)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;django.db.backends.postgresql.base.Cursor [closed] [IDLE] (host=localhost user=admin database=test_iden_oauth) at 0x169d8f4d0&gt;
query = 'CREATE TABLE "django_migrations" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied" timestamp with time zone NOT NULL)'
params = None

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        prepare: bool | None = None,
        binary: bool | None = None,
    ) -&gt; Self:
        """
        Execute a query or command to the database.
        """
        try:
            with self._conn.lock:
                self._conn.wait(
                    self._execute_gen(query, params, prepare=prepare, binary=binary)
                )
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: no schema has been selected to create in
E           LINE 1: CREATE TABLE "django_migrations" ("id" bigint NOT NULL PRIMA...
E                                ^

venv/lib/python3.11/site-packages/psycopg/cursor.py:97: ProgrammingError

During handling of the above exception, another exception occurred:

request = &lt;SubRequest '_django_db_marker' for &lt;Function test_google_onboarding[chromium]&gt;&gt;

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -&gt; None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
&gt;           request.getfixturevalue("_django_db_helper")

venv/lib/python3.11/site-packages/pytest_django/plugin.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv/lib/python3.11/site-packages/pytest_django/fixtures.py:144: in django_db_setup
    db_cfg = setup_databases(
venv/lib/python3.11/site-packages/django/test/utils.py:206: in setup_databases
    connection.creation.create_test_db(
venv/lib/python3.11/site-packages/django/db/backends/base/creation.py:78: in create_test_db
    call_command(
venv/lib/python3.11/site-packages/django/core/management/__init__.py:194: in call_command
    return command.execute(*args, **defaults)
venv/lib/python3.11/site-packages/django/core/management/base.py:459: in execute
    output = self.handle(*args, **options)
venv/lib/python3.11/site-packages/django_tenants/management/commands/migrate_schemas.py:100: in handle
    executor.run_migrations(tenants=tenants)
venv/lib/python3.11/site-packages/django_tenants/migration_executors/standard.py:14: in run_migrations
    run_migrations(self.args, self.options, self.codename, schema_name, idx=idx, count=len(tenants))
venv/lib/python3.11/site-packages/django_tenants/migration_executors/base.py:49: in run_migrations
    migration_recorder.ensure_schema()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;django.db.migrations.recorder.MigrationRecorder object at 0x169898590&gt;

    def ensure_schema(self):
        """Ensure the table exists and has the correct schema."""
        # If the table's there, that's fine - we've never changed its schema
        # in the codebase.
        if self.has_table():
            return
        # Make the table
        try:
            with self.connection.schema_editor() as editor:
                editor.create_model(self.Migration)
        except DatabaseError as exc:
&gt;           raise MigrationSchemaMissing(
                "Unable to create the django_migrations table (%s)" % exc
            )
E           django.db.migrations.exceptions.MigrationSchemaMissing: Unable to create the django_migrations table (no schema has been selected to create in
E           LINE 1: CREATE TABLE "django_migrations" ("id" bigint NOT NULL PRIMA...
E                                ^)

venv/lib/python3.11/site-packages/django/db/migrations/recorder.py:80: MigrationSchemaMissing</error></testcase></testsuite></testsuites>